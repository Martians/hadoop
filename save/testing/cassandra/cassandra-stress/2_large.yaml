
keyspace: stresscql

keyspace_definition: |
  CREATE KEYSPACE stresscql WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 3};

table: typestest

table_definition: |
  CREATE TABLE typestest (
      C0 Text, C1 Text, C2 Text, C3 Text, C4 Text, C5 Text, C6 Text, C7 Text, C8 Text, C9 Text, 
      C10 Text, C11 Text, C12 Text, C13 Text, C14 Text, C15 Text, C16 Text, C17 Text, C18 Text, C19 Text, 
      C20 Text, C21 Text, C22 Text, C23 Text, C24 Text, C25 Text, C26 Text, C27 Text, C28 Text, C29 Text, 
      C30 Text, C31 Text, C32 Text, C33 Text, C34 Text, C35 Text, C36 Text, C37 Text, C38 Text, C39 Text, 
      C40 Text, C41 Text, C42 Text, C43 Text, C44 Text, C45 Text, C46 Text, C47 Text, C48 Text, C49 Text, 
      C50 Text, C51 Text, C52 Text, C53 Text, C54 Text, C55 Text, C56 Text, C57 Text, C58 Text, C59 Text, 
      C60 Text, C61 Text, C62 Text, C63 Text, C64 Text, C65 Text, C66 Text, C67 Text, C68 Text, C69 Text, 
      C70 Text, C71 Text, C72 Text, C73 Text, C74 Text, C75 Text, C76 Text, C77 Text, C78 Text, C79 Text, 
      C80 Text, C81 Text, C82 Text, C83 Text, C84 Text, C85 Text, C86 Text, C87 Text, C88 Text, C89 Text, 
      C90 Text, C91 Text, C92 Text,
      PRIMARY KEY(C0, C34)
    )
    WITH compaction = { 'class':'LeveledCompactionStrategy' }
#    AND compression = { 'sstable_compression' : '' }
#    AND comment='A table of many types to test wide rows'

#
# Optional meta information on the generated columns in the above table
# The min and max only apply to text and blob types
# The distribution field represents the total unique population
# distribution of that column across rows.  Supported types are
# 
#      EXP(min..max)                        An exponential distribution over the range [min..max]
#      EXTREME(min..max,shape)              An extreme value (Weibull) distribution over the range [min..max]
#      GAUSSIAN(min..max,stdvrng)           A gaussian/normal distribution, where mean=(min+max)/2, and stdev is (mean-min)/stdvrng
#      GAUSSIAN(min..max,mean,stdev)        A gaussian/normal distribution, with explicitly defined mean and stdev
#      UNIFORM(min..max)                    A uniform distribution over the range [min, max]
#      FIXED(val)                           A fixed distribution, always returning the same value
#      SEQ(min..max)                        A fixed sequence, returning values in the range min to max sequentially (starting based on seed), wrapping if necessary.
#      Aliases: extr, gauss, normal, norm, weibull
#
#      If preceded by ~, the distribution is inverted
#
# Defaults for all columns are size: uniform(4..8), population: uniform(1..100B), cluster: fixed(1)
#
columnspec:
  - name: C0
    size: FIXED(4)
    population: uniform(1..1000B)     # the range of unique values to select for the field (default is 100Billion)
  - name: c34
    size: FIXED(4)
    cluster: uniform(1..20)

insert:
  partitions: uniform(1..5)       # number of unique partitions to update in a single operation
                                  # if batchcount > 1, multiple batches will be used but all partitions will
                                  # occur in all batches (unless they finish early); only the row counts will vary
  batchtype: LOGGED               # type of batch to use
  select: FIXED(1)/10     # uniform chance any single generated CQL row will be visited in a partition;
                                  # generated for each partition independently, each time we visit it

#
# A list of queries you wish to run against the schema
#
queries:
   simple1:
      cql: select * from typestest where c0 = ? and c1 = ? LIMIT 100
      fields: samerow             # samerow or multirow (select arguments from the same row, or randomly from all rows in the partition)

#
# A list of bulk read queries that analytics tools may perform against the schema
# Each query will sweep an entire token range, page by page.
#
# extra_definitions:
#   - create index on typestest(C1);
#   - create index on typestest(C2);
#   - create index on typestest(C3);
#   - create index on typestest(C4);
#   - create index on typestest(C5);
#   - create index on typestest(C6);
#   - create index on typestest(C7);
#   - create index on typestest(C8);
#   - create index on typestest(C9);
#   - create index on typestest(C10);
#   - create index on typestest(C11);
#   - create index on typestest(C12);
#   - create index on typestest(C13);
#   - create index on typestest(C14);
#   - create index on typestest(C15);
#   - create index on typestest(C16);
#   - create index on typestest(C17);
#   - create index on typestest(C18);
#   - create index on typestest(C19);
#   - create index on typestest(C20);
#   - create index on typestest(C21);
#   - create index on typestest(C22);
#   - create index on typestest(C23);
#   - create index on typestest(C24);
  
