<?xml version="1.0" encoding="UTF-8"?>

<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<!--
    Ivylite Spring configuration file to startup Ivylite cache.

    This file demonstrates how to configure cache using Spring. Provided cache
    will be created on node startup.

    Use this configuration file when running HTTP REST examples (see 'examples/rest' folder).

    When starting a standalone node, you need to execute the following command:
    {IVYLITE_HOME}/bin/ivylite.{bat|sh} examples/config/example-cache.xml

    When starting Ivylite from Java IDE, pass path to this file to Ivylition:
    Ivylition.start("examples/config/example-cache.xml");
-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util.xsd">
    <bean id="ivylite.cfg" class="cn.nimblex.ivylite.configuration.IvyliteConfiguration">
        <property name="userAttributes">
            <map>
                <entry key="ROLE" value="server"/>
            </map>
        </property>

        <property name="cacheConfiguration">
            <list>
                <!-- Partitioned cache example configuration (Atomic mode). -->
                <bean class="cn.nimblex.ivylite.configuration.CacheConfiguration">
                    <property name="name" value="atomic"/>
                    <property name="atomicityMode" value="ATOMIC"/>
                    <property name="backups" value="0"/>
                </bean>
            </list>
        </property>
	
        <property name="dataStorageConfiguration">
            <bean class="cn.nimblex.ivylite.configuration.DataStorageConfiguration">
                <property name="defaultDataRegionConfiguration">
                    <bean class="cn.nimblex.ivylite.configuration.DataRegionConfiguration">
                        <property name="name" value="default"/>
                        <!--
                        <property name="maxSize" value="34359738368"/>
                        <property name="initialSize" value="17179869184"/>
                        -->
                        <property name="persistenceEnabled" value="false"/>
                    </bean>
                </property>

                <property name="walMode" value="NONE"/>
            </bean>
        </property>

    	<!-- Explicitly enable peer class loading. -->
        <property name="peerClassLoadingEnabled" value="true"/>

        <!-- Enable cache events. -->
        <!--<property name="includeEventTypes">
            <util:constant static-field="cn.nimblex.ivylite.events.EventType.EVT_CACHE_OBJECT_PUT"/>
        </property>-->

        <!-- Explicitly configure TCP discovery SPI to provide list of initial nodes. -->
        <property name="discoverySpi">
            <bean class="cn.nimblex.ivylite.spi.discovery.tcp.TcpDiscoverySpi">
                <property name="ipFinder">
                    <!--
                        Ivylite provides several options for automatic discovery that can be used
                        instead os static IP based discovery. For information on all options refer
                        to our documentation: http://apacheivylite.readme.io/docs/cluster-config
                    -->
                    <!-- Uncomment static IP finder to enable static-based discovery of initial nodes. -->
                    <bean class="cn.nimblex.ivylite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder">
                    <!--<bean class="cn.nimblex.ivylite.spi.discovery.tcp.ipfinder.multicast.TcpDiscoveryMulticastIpFinder">-->
                        <property name="addresses">
                            <list>
                                <!-- In distributed environment, replace with actual host IP address. -->
                                <value>192.168.108.17:47500..47502</value>
                                <value>192.168.108.18:47500..47502</value>
                                <value>192.168.108.19:47500..47502</value>
                                <value>192.168.108.20:47500..47502</value>
				                <value>192.168.108.104:47500..47502</value>
                                <value>192.168.108.105:47500..47502</value>
                                <value>192.168.108.118:47500..47502</value>
                                <value>192.168.108.122:47500..47502</value>
                            </list>
                        </property>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>
</beans>
